name: Deploy

# NOTE
# secrets.OSSRH_GPG_SECRET_KEY was created with
#    gpg --export-secret-keys -a <key-id> > secret.txt
# then all newlines were replaced with literal '\n'
# see also https://gist.github.com/sualeh/ae78dc16123899d7942bc38baba5203c


# README
# This script
#  - builds native libs for the supported platforms (except macOS)
#  - uploads the native libs as GitHub artifacts
#  - deploys the native libs to Sonatype
#  - downloads all native libs artifacts
#  - injects the artifacts into the macOS build (-> complete)
#  - deploys the all macOS products

on:
  push:
    branches:
      - main


jobs:

  windows-x64-build:

    runs-on: windows-2019
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          install: mingw-w64-x86_64-toolchain
          path-type: inherit

      - id: install-secret-key
        name: Install gpg secret key
        run: |
          cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG

      - uses: actions/checkout@v2

      - name: Set up publication to Maven Central
        uses: actions/setup-java@v2
        with:
          java-version: '9'
          architecture: x64
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          distribution: 'zulu'
          cache: 'maven'

      - name: Build/test code with Maven
        run: |
          which mvn
          mvn --activate-profiles platform-x86_64-win --batch-mode install --file pom.xml

      - run: mkdir nativelibs && cp jipesfft-x86_64-win/target/*.dll nativelibs
      - uses: actions/upload-artifact@v2
        with:
          name: nativelibs-x64-win
          path: nativelibs
          retention-days: 1

      - id: publish-native-lib-to-central
        name: Publish to Central Repository
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          GPG_TTY: $(tty)
        run: |
          mvn \
            --projects jipesfft-x86_64-win \
            --no-transfer-progress \
            --batch-mode \
            -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} \
            --activate-profiles release,platform-x86_64-win \
            --file pom.xml \
            deploy

  windows-x86-build:

    runs-on: windows-2019
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          msystem: mingw32
          install: mingw-w64-i686-toolchain
          path-type: inherit

      - id: install-secret-key
        name: Install gpg secret key
        run: |
          cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG

      - uses: actions/checkout@v2

      - name: Set up publication to Maven Central
        uses: actions/setup-java@v2
        with:
          java-version: '9'
          architecture: x64
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          distribution: 'zulu'
          cache: 'maven'

      - name: Build/test code with Maven
        run: |
          which mvn
          mvn --activate-profiles platform-i386-win --batch-mode install --file pom.xml

      - run: mkdir nativelibs && cp jipesfft-i386-win/target/*.dll nativelibs
      - uses: actions/upload-artifact@v2
        with:
          name: nativelibs-x86-win
          path: nativelibs
          retention-days: 1

      - id: publish-native-lib-to-central
        name: Publish to Central Repository
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          GPG_TTY: $(tty)
        run: |
          mvn \
            --projects jipesfft-i386-win \
            --no-transfer-progress \
            --batch-mode \
            -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} \
            --activate-profiles release,platform-i386-win \
            --file pom.xml \
            deploy


  linux-x64-build:

    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - id: install-secret-key
        name: Install gpg secret key
        run: |
          cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG

      - name: Set up publication to Maven Central
        uses: actions/setup-java@v2
        with:
          java-version: '9'
          architecture: x64
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          distribution: 'zulu'
          cache: 'maven'

      - name: Build/test code with Maven
        run: mvn -P platform-x86_64-linux --batch-mode install --file pom.xml

      - run: mkdir nativelibs && cp jipesfft-x86_64-linux/target/*.so nativelibs
      - uses: actions/upload-artifact@v2
        with:
          name: nativelibs-x86-linux
          path: nativelibs
          retention-days: 1

      - id: publish-native-lib-to-central
        name: Publish to Central Repository
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          GPG_TTY: $(tty)
        run: |
          mvn \
            --projects jipesfft-x86_64-linux \
            --no-transfer-progress \
            --batch-mode \
            -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} \
            --activate-profiles release,platform-x86_64-linux \
            --file pom.xml  \
            deploy

  linux-aarch64-build:

    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - id: install-secret-key
        name: Install gpg secret key
        run: |
          cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG

      - name: Set up publication to Maven Central
        uses: actions/setup-java@v2
        with:
          java-version: '9'
          architecture: x64
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          distribution: 'zulu'
          cache: 'maven'

      - name: Build code with Maven (cannot test, no native GH runner)
        run: mvn -P platform-aarch64-linux --batch-mode install --file pom.xml -Dmaven.test.skip=true

      - run: mkdir nativelibs && cp jipesfft-aarch64-linux/target/*.so nativelibs
      - uses: actions/upload-artifact@v2
        with:
          name: nativelibs-aarch64-linux
          path: nativelibs
          retention-days: 1

      - id: publish-native-lib-to-central
        name: Publish to Central Repository
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          GPG_TTY: $(tty)
        run: |
          mvn \
            --projects jipesfft-aarch64-linux \
            --no-transfer-progress \
            --batch-mode \
            -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} \
            --activate-profiles release,platform-aarch64-linux \
            --file pom.xml  \
            deploy -Dmaven.test.skip=true

  macos-build:

    needs: [linux-x64-build, linux-aarch64-build, windows-x86-build, windows-x64-build ]
    runs-on: macos-latest

    steps:
      - id: install-secret-key
        name: Install gpg secret key
        run: |
          cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG
          echo "${{ secrets.MACOS_CERTIFICATE }}" | base64 --decode > certificate.p12
          security create-keychain -p my_secret build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p my_secret build.keychain
          security import certificate.p12 -k build.keychain -P "${{ secrets.MACOS_CERTIFICATE_PWD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k my_secret build.keychain

      - uses: actions/checkout@v2

      - name: Set up publication to Maven Central
        uses: actions/setup-java@v2
        with:
          java-version: '9'
          architecture: x64
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          distribution: 'zulu'
          cache: 'maven'

      - name: create target/classes for jipesfft-complete
        run: mkdir -p jipesfft-complete/target/classes/

      - name: Get Linux x86_64 native lib
        uses: actions/download-artifact@v2
        with:
          name: nativelibs-x86-linux
          path: jipesfft-complete/target/classes/

      - name: Get Linux aarch64 native lib
        uses: actions/download-artifact@v2
        with:
          name: nativelibs-aarch64-linux
          path: jipesfft-complete/target/classes/

      - name: Get Windows x86 native lib
        uses: actions/download-artifact@v2
        with:
          name: nativelibs-x86-win
          path: jipesfft-complete/target/classes/

      - name: Get Windows x64 native lib
        uses: actions/download-artifact@v2
        with:
          name: nativelibs-x64-win
          path: jipesfft-complete/target/classes/

      - id: publish-to-central
        name: Publish to Central Repository
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          GPG_TTY: $(tty)
        run: |
          mvn \
            --no-transfer-progress \
            --batch-mode \
            -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} \
            --activate-profiles release \
            deploy --file pom.xml

      # deploy javadocs to github pages
      - name: Deploy Javadocs to GitHub Pages Branch
        uses: JamesIves/github-pages-deploy-action@4.1.5
        with:
          branch: gh-pages
          folder: jipesfft-complete/target/apidocs/
